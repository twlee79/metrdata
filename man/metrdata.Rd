% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metrdata.R
\name{metrdata}
\alias{metrdata}
\title{\code{metrdata} object constructor}
\usage{
metrdata(..., label = NULL, include = NULL)
}
\arguments{
\item{...}{Contents of metadata. Specified a series of named parameters
as metadata; nesting with lists or references to other objects with metadata
or \code{metrdata} objects allowed. If a single unnamed list is
provided, its contents are converted to a \code{metrdata} object. Any unnamed
objects with metadata or \code{metrdata} objects specified will be used as
includes. Any named metadata or \code{metrdata} objects are nested under the
provided name.}

\item{label}{Optional label to be provided as name for first argument, e.g
\code{metrdata(list(), label="arg1")} is the same as \code{metrdata(arg1 = list())}.}

\item{include}{A single or list of objects with metadata or \code{metrdata}
object to include in the top-level of the new object.}
}
\value{
A \code{metrdata} object.
}
\description{
Constructs a \code{metrdata} object from provided arguments.
}
\details{
The \code{metrdata} constructor supports multiple patterns of usage.

The most basic form is:

\code{metrdata(`Original data source` = list(Note = "Fictional data", Created = "2024-01"))}

where metadata is directly specified is named arguments in the constructor.
Note that usage of generic labels such as "Note" in the top-level of the
metadata is discouraged as the context may become obfuscated if the metadata
is inherited by derived data; instead, top-level descriptive labels are
encouraged.

A related alternative is to initialise based on a list provided as the first
argument in the constructor:
\code{metrdata(list(`Original data source` = list(Note = "Fictional data", Created = "2024-01")))}

The top-level name for the metadata can also be provided directly using the
\code{label} parameter; this gives the same result as the above:
\code{metrdata(label = "Original data source", list(Note = "Fictional data", Created = "2024-01"))}

\code{metrdata} objects also supported inclusion of nesting of other metadata,
and directly 'includes' at the top level. The difference between nesting
and 'includes' are that nesting refers to the inclusion of other metadata
contents under a new heading, while 'includes' refer to direct inclusion
of metadata contents in the top-level of the new object. The use of
unique descriptive headings at the top-level allows 'includes' to be used
with metadata accumulating at different processing steps, without requiring
excessive nesting that more reduce readability.
}
\section{Inclusion of nested lists}{


Child lists are processed when converting to a \code{metrdata} object by
parsing its contents and directly embedding metadata from any children that
themselves are \code{metrdata} objects or have associated metadata.

This allows a pattern where an object containing metadata may be referenced
when creating metadata for an object.
}

\section{Includes}{


An 'include' is an object with metadata or a \code{metrdata} object whose
contents is included directly in the new object, i.e. their contents are
flattened into the new object.
}

\examples{
# these produce the same result
metrdata(`Original data source` = list(Note="Fictional data", Created="2024-01"))
metrdata(list(`Original data source` = list(Note="Fictional data", Created="2024-01")))
metrdata(label = "Original data source", list(Note="Fictional data", Created="2024-01"))

# Nesting; nested metrdata object is included in the newly constructed object
# The same result would work if an obj with the associated metadata assign
# was passed instead of the metrdata object itself
metrdata(
  `Original data source` = list(Note="Fictional data", Created="2024-01"),
  Toplevel = metrdata(Note="This is nested metadata")
)

# 'Includes':
# Unnamed metrdata objects or objects with metadata are considered 'includes'
# Alternatively, these are provided under the include parameter (a list of
# these is also supported)
# The contents of these are included directly in the top-level of the new
# object
metrdata(
  `Original data source` = list(Note="Fictional data", Created="2024-01"),
  metrdata(Note="This is an included metadata"))

metrdata(
  `Original data source` = list(Note="Fictional data", Created="2024-01"),
  include = metrdata(Note="This is an included metadata"))
}
